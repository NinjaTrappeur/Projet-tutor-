<?xml version="1.0"?>
<!-- 
	* This library is free software; you can redistribute it and/or
	* modify it under the terms of the GNU Lesser General Public
	* License as published by the Free Software Foundation; either
	* version 2 of the License, or (at your option) any later version.
	*
	* This library is distributed in the hope that it will be useful,
	* but WITHOUT ANY WARRANTY; without even the implied warranty of
	* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	* Lesser General Public License for more details.
	*
	* You should have received a copy of the GNU Lesser General Public
	* License along with this library; if not, write to the Free Software
	* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<project name="Helloworld Fraclet" default="run" basedir=".">
	<description>
        simple example build file
    </description>
	<property environment="env"/>
	
	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	
	<condition property="lib" value="${env.FRACTAL_HOME}/lib">
		<and>
			<not>
				<available file="../../lib/"/>
		    	</not>	
		 </and>
	</condition>
		
	<condition property="lib" value="../../lib">
		 <and>
			 <available file="../../lib/"/>
		 </and>
	</condition>
	
	<property name="resources" location="resources"/>
	<property name="gen" value="${basedir}/generated" />
	<property name="gen.spooned" value="${gen}/spooned" />

	<property file="build.properties"/>
	
	
	<path id="classpath">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="build" />
	</path>


	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
	</target>

	<target name="compile1" depends="init" description="compile the source ">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" classpathref="classpath" />
	</target>

	<target name="compile" depends="init" description="compile the source ">
		<mkdir dir="${gen}" />
		<mkdir dir="${gen.spooned}" />
		<mkdir dir="${build}" />

		<javac srcdir="${src}" destdir="${build}" debug="on">
			<classpath refid="classpath" />
			<include name="**/*.java" />
		</javac>

		<!-- define spoon Task -->
		<taskdef name="spoon" classname="spoon.SpoonTask" classpathref="classpath"/>

		<!-- Process the source code of the example -->
		<spoon classpathref="classpath" verbose="true" output="${gen.spooned}" spoonlet="${lib}/${fractaladl-spoonlet-jar}">
			<sourceset dir="${src}" includes="**/*.java" />
			<sourceset file="${lib}/${aval-jar}" />
			<sourceset file="${lib}/${fraclet-annotations-jar}" />
		</spoon>

		<spoon classpathref="classpath" verbose="true" output="${gen.spooned}" spoonlet="${lib}/${fractal-spoonlet-jar}">
			<sourceset dir="${src}" includes="**/*.java" />
			<sourceset file="${lib}/${aval-jar}" />
			<sourceset file="${lib}/${fraclet-annotations-jar}" />
		</spoon>

		<javac srcdir="${gen.spooned}" destdir="${build}" source="1.5" classpathref="classpath" />

		<copy todir="${build}" preservelastmodified="yes" includeEmptyDirs="false">
			<fileset dir="${src}">
				<include name="**/*.fractal" />
			</fileset>
		</copy>
		<copy todir="${build}" preservelastmodified="yes" includeEmptyDirs="false">
			<fileset dir="${gen.spooned}">
				<include name="**/*.fractal" />
			</fileset>
		</copy>

	</target>

	<target name="dist" depends="compile" description="generate a jar of the helloworld">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}" />

		<!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
		<jar jarfile="${dist}/helloworld.jar" basedir="${build}" />
	</target>
	
	<target name="run" depends="compile">
		<java classname="org.objectweb.fractal.adl.Launcher" fork="true" classpathref="classpath">
			<jvmarg value="-Dfractal.provider=org.objectweb.fractal.julia.Julia" />
			<arg line="-fractal travelagency.travelAgency"/>
		</java>
	</target>

	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>
</project>

